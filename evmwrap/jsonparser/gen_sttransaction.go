// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package main

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*stTransactionMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s stTransaction) MarshalJSON() ([]byte, error) {
	type stTransaction struct {
		Nonce    math.HexOrDecimal64   `json:"nonce"`
		To       string                `json:"to"`
		Data     string                `json:"data"`
		Value    *math.HexOrDecimal256 `json:"value"`
		GasLimit math.HexOrDecimal64   `json:"gasLimit"`
		GasPrice *math.HexOrDecimal256 `json:"gasPrice"`
		V        *math.HexOrDecimal256 `json:"v"`
		R        *math.HexOrDecimal256 `json:"r"`
		S        *math.HexOrDecimal256 `json:"s"`
	}
	var enc stTransaction
	enc.Nonce = math.HexOrDecimal64(s.Nonce)
	enc.To = s.To
	enc.Data = s.Data
	enc.Value = (*math.HexOrDecimal256)(s.Value)
	enc.GasLimit = math.HexOrDecimal64(s.GasLimit)
	enc.GasPrice = (*math.HexOrDecimal256)(s.GasPrice)
	enc.V = (*math.HexOrDecimal256)(s.V)
	enc.R = (*math.HexOrDecimal256)(s.R)
	enc.S = (*math.HexOrDecimal256)(s.S)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *stTransaction) UnmarshalJSON(input []byte) error {
	type stTransaction struct {
		Nonce    *math.HexOrDecimal64  `json:"nonce"`
		To       *string               `json:"to"`
		Data     *string               `json:"data"`
		Value    *math.HexOrDecimal256 `json:"value"`
		GasLimit *math.HexOrDecimal64  `json:"gasLimit"`
		GasPrice *math.HexOrDecimal256 `json:"gasPrice"`
		V        *math.HexOrDecimal256 `json:"v"`
		R        *math.HexOrDecimal256 `json:"r"`
		S        *math.HexOrDecimal256 `json:"s"`
	}
	var dec stTransaction
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Nonce != nil {
		s.Nonce = uint64(*dec.Nonce)
	}
	if dec.To != nil {
		s.To = *dec.To
	}
	if dec.Data != nil {
		s.Data = *dec.Data
	}
	if dec.Value != nil {
		s.Value = (*big.Int)(dec.Value)
	}
	if dec.GasLimit != nil {
		s.GasLimit = uint64(*dec.GasLimit)
	}
	if dec.GasPrice != nil {
		s.GasPrice = (*big.Int)(dec.GasPrice)
	}
	if dec.V != nil {
		s.V = (*big.Int)(dec.V)
	}
	if dec.R != nil {
		s.R = (*big.Int)(dec.R)
	}
	if dec.S != nil {
		s.S = (*big.Int)(dec.S)
	}
	return nil
}
